{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mkdocstrings-zig","text":"<p>A Zig handler for mkdocstrings. Makes it possible to create documentation from code in Zig language using mkdocs.</p>"},{"location":"#demo","title":"Demo","text":"<p>See demo documentation generated from test_zig_project.</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install 'mkdocstrings[zig]'\npip install mkdocs-material\npip install typing-extensions\n</code></pre> <p>Technically, it can work without mkdocs-material theme, but it doesn't generate table of contents without the theme.</p>"},{"location":"#mkdocsyml-example","title":"mkdocs.yml example","text":"<pre><code>site_name: Example of zig project documentation using mkdocstrings\n\n# remove if you are not using mkdocs-material theme\n# or replace it with the theme of your choice\ntheme:\n  name: material\n\nplugins:\n- mkdocstrings:\n    default_handler: zig\n</code></pre>"},{"location":"#docsindexmd-example","title":"docs/index.md example","text":"<pre><code># Project Documentation\n\n::: src/main.zig\n\n::: src/root.zig\n</code></pre> <p>Or add documentation for a directory:</p> <pre><code>::: src\n</code></pre>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at insolor@gmail.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd mkdocstrings-zig\nmake setup\n</code></pre> <p>Note</p> <p>If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build mkdocstrings-zig. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.2.1</code> BSD-3-Clause colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.6.2</code> <code>1.7.3</code> ISC Jinja2 A very fast and expressive template engine. <code>&gt;=2.11.1</code> <code>3.1.6</code> BSD License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.6</code> <code>3.8.2</code> BSD-3-Clause MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=1.1</code> <code>3.0.2</code> BSD License mergedeep A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.2</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.29, &gt;=0.18</code> <code>0.29.1</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=1.16.2</code> <code>1.16.12</code> ISC packaging Core utilities for Python packages <code>&gt;=20.5, &gt;=20</code> <code>25.0</code> Apache Software License + BSD License pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0, &gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.3.8</code> MIT pymdown-extensions Extension pack for Python Markdown. <code>&gt;=6.3</code> <code>10.16</code> MIT python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>1.1</code> MIT six Python 2 and 3 compatibility utilities <code>&gt;=1.5, &gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT tree-sitter Python bindings to the Tree-sitter parsing library <code>&gt;=0.25.0</code> <code>0.25.0</code> MIT License tree-sitter-zig Zig grammar for tree-sitter <code>&gt;=1.1.2</code> <code>1.1.2</code> MIT typing_extensions Backported and Experimental Type Hints for Python 3.9+ <code>&gt;=4.6.0, &gt;=4.0</code> <code>4.14.1</code> PSF-2.0 watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License annotated-types Reusable constraint types to use with typing.Annotated <code>&gt;=0.6.0</code> <code>0.7.0</code> MIT License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT babel Internationalization utilities <code>&gt;=2.7.0</code> <code>2.17.0</code> BSD-3-Clause backrefs A wrapper around re and regex that adds additional back references. <code>~=5.7.post1</code> <code>5.9</code> MIT beautifulsoup4 Screen-scraping library <code>&gt;=4.12</code> <code>4.13.4</code> MIT License build A simple, correct Python build frontend <code>&gt;=1.2</code> <code>1.2.2.post1</code> MIT License cappa Declarative CLI argument parser. <code>&gt;=0.22</code> <code>0.28.1</code> ? certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.7.14</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.14</code> <code>1.17.1</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.2</code> MIT click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.2.1</code> BSD-3-Clause colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=7.5</code> <code>7.9.2</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>45.0.5</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1.6</code> <code>1.6.0</code> ISC execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=0.11, !=1.0.0</code> <code>1.0.4</code> ISC ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.5</code> <code>2.5.3</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.12</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>&gt;=3.1.44</code> <code>3.1.44</code> BSD-3-Clause griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.6.2</code> <code>1.7.3</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD humanize Python humanize utilities <code>&gt;=4.9</code> <code>4.12.3</code> MIT id A tool for generating OIDC identities <code>1.5.0</code> Apache Software License idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License iniconfig brain-dead simple config-ini parsing <code>&gt;=1</code> <code>2.1.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.2.1</code> MIT jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.9.0</code> MIT Jinja2 A very fast and expressive template engine. <code>&gt;=2.11.1</code> <code>3.1.6</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.6.0</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.6</code> <code>3.8.2</code> BSD-3-Clause markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.8</code> <code>1.11.0</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=1.0.0, &lt;4.0.0</code> <code>3.0.0</code> MIT License markdownify Convert HTML to markdown. <code>&gt;=0.14</code> <code>1.1.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=1.1</code> <code>3.0.2</code> BSD License mdformat CommonMark compliant Markdown formatter <code>&gt;=0.7.21</code> <code>0.7.22</code> MIT License mdformat_tables An mdformat plugin for rendering tables. <code>&gt;=1.0</code> <code>1.0.0</code> MIT License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.2</code> ISC mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1.2</code> <code>1.4.7</code> MIT mkdocs-llmstxt MkDocs plugin to generate an /llms.txt file. <code>&gt;=0.2</code> <code>0.3.0</code> ISC mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.6.15</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.10</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.29, &gt;=0.18</code> <code>0.29.1</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=1.16.2</code> <code>1.16.12</code> ISC more-itertools More routines for operating on iterables, beyond itertools <code>10.7.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1.10</code> <code>1.17.0</code> MIT mypy_extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.1.0</code> MIT nh3 Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.14</code> <code>0.3.0</code> MIT packaging Core utilities for Python packages <code>&gt;=20.5, &gt;=20</code> <code>25.0</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0, &gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.3.8</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.2</code> <code>1.6.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause pydantic Data validation using Python type hints <code>&gt;=2.10</code> <code>2.11.7</code> MIT pydantic_core Core functionality for Pydantic validation and serialization <code>==2.33.2</code> <code>2.33.2</code> MIT Pygments Pygments is a syntax highlighting package written in Python. <code>&gt;=2.7.2</code> <code>2.19.2</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>&gt;=6.3</code> <code>10.16</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8.2</code> <code>8.4.1</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=5.0</code> <code>6.2.1</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.16.0</code> MIT License pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.6</code> <code>3.8.0</code> MIT python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>&gt;=2025.1</code> <code>2025.2</code> MIT PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>1.1</code> MIT readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 requests Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.32.4</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>14.0.0</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.4</code> <code>0.12.4</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.4</code> BSD License six Python 2 and 3 compatibility utilities <code>&gt;=1.5, &gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.2</code> BSD-3-Clause soupsieve A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.7</code> MIT twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1</code> <code>6.1.0</code> Apache Software License type-lens type-lens is a Python template project designed to simplify the setup of a new project. <code>&gt;=0.2.3</code> <code>0.2.4</code> MIT types-Markdown Typing stubs for Markdown <code>&gt;=3.6</code> <code>3.8.0.20250708</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20250516</code> Apache-2.0 typing-inspection Runtime typing introspection tools <code>&gt;=0.4.0</code> <code>0.4.1</code> MIT typing_extensions Backported and Experimental Type Hints for Python 3.9+ <code>&gt;=4.6.0, &gt;=4.0</code> <code>4.14.1</code> PSF-2.0 urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.5.0</code> MIT watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0 wcwidth Measures the displayed width of unicode strings in a terminal <code>&gt;=0.2.13</code> <code>0.2.13</code> MIT yore Manage legacy code with comments. <code>&gt;=0.3.3</code> <code>0.4.3</code> ISC"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2025, insolor\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"reference/api/","title":"API reference","text":""},{"location":"reference/api/#mkdocstrings_handlers.zig","title":"zig","text":"<p>Zig handler for mkdocstrings.</p> <p>Classes:</p> <ul> <li> <code>ZigConfig</code>           \u2013            <p>Zig handler configuration.</p> </li> <li> <code>ZigHandler</code>           \u2013            <p>The Zig handler class.</p> </li> <li> <code>ZigInputConfig</code>           \u2013            <p>Zig handler configuration.</p> </li> <li> <code>ZigInputOptions</code>           \u2013            <p>Accepted input options.</p> </li> <li> <code>ZigOptions</code>           \u2013            <p>Final options passed as template context.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_handler</code>             \u2013              <p>Simply return an instance of <code>ZigHandler</code>.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigConfig","title":"ZigConfig  <code>dataclass</code>","text":"<pre><code>ZigConfig(options: dict[str, Any] = dict())\n</code></pre> <p>               Bases: <code>ZigInputConfig</code></p> <p>Zig handler configuration.</p> <p>Methods:</p> <ul> <li> <code>coerce</code>             \u2013              <p>Coerce data.</p> </li> <li> <code>from_data</code>             \u2013              <p>Create an instance from a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>options</code>               (<code>dict[str, Any]</code>)           \u2013            <p>Global options in mkdocs.yml.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigConfig.options","title":"options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>options: dict[str, Any] = field(default_factory=dict)\n</code></pre> <p>Global options in mkdocs.yml.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigConfig.coerce","title":"coerce  <code>classmethod</code>","text":"<pre><code>coerce(**data: Any) -&gt; MutableMapping[str, Any]\n</code></pre> <p>Coerce data.</p> Source code in <code>src/mkdocstrings_handlers/zig/_internal/config.py</code> <pre><code>@classmethod\ndef coerce(cls, **data: Any) -&gt; MutableMapping[str, Any]:\n    \"\"\"Coerce data.\"\"\"\n    return super().coerce(**data)\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigConfig.from_data","title":"from_data  <code>classmethod</code>","text":"<pre><code>from_data(**data: Any) -&gt; Self\n</code></pre> <p>Create an instance from a dictionary.</p> Source code in <code>src/mkdocstrings_handlers/zig/_internal/config.py</code> <pre><code>@classmethod\ndef from_data(cls, **data: Any) -&gt; Self:\n    \"\"\"Create an instance from a dictionary.\"\"\"\n    return cls(**cls.coerce(**data))\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler","title":"ZigHandler","text":"<pre><code>ZigHandler(\n    config: ZigConfig, base_dir: Path, **kwargs: Any\n)\n</code></pre> <p>               Bases: <code>BaseHandler</code></p> <p>The Zig handler class.</p> <p>Parameters:</p> <ul> <li> <code>config</code>               (<code>ZigConfig</code>)           \u2013            <p>The handler configuration.</p> </li> <li> <code>base_dir</code>               (<code>Path</code>)           \u2013            <p>The base directory of the project.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Arguments passed to the parent constructor.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>collect</code>             \u2013              <p>Collect data given an identifier and selection configuration.</p> </li> <li> <code>do_convert_markdown</code>             \u2013              <p>Render Markdown text; for use inside templates.</p> </li> <li> <code>do_heading</code>             \u2013              <p>Render an HTML heading and register it for the table of contents. For use inside templates.</p> </li> <li> <code>get_aliases</code>             \u2013              <p>Get aliases for a given identifier.</p> </li> <li> <code>get_extended_templates_dirs</code>             \u2013              <p>Load template extensions for the given handler, return their templates directories.</p> </li> <li> <code>get_headings</code>             \u2013              <p>Return and clear the headings gathered so far.</p> </li> <li> <code>get_inventory_urls</code>             \u2013              <p>Return the URLs (and configuration options) of the inventory files to download.</p> </li> <li> <code>get_options</code>             \u2013              <p>Get combined default, global and local options.</p> </li> <li> <code>get_templates_dir</code>             \u2013              <p>Return the path to the handler's templates directory.</p> </li> <li> <code>load_inventory</code>             \u2013              <p>Yield items and their URLs from an inventory file streamed from <code>in_file</code>.</p> </li> <li> <code>render</code>             \u2013              <p>Render a template using provided data and configuration options.</p> </li> <li> <code>render_backlinks</code>             \u2013              <p>Render backlinks.</p> </li> <li> <code>teardown</code>             \u2013              <p>Teardown the handler.</p> </li> <li> <code>update_env</code>             \u2013              <p>Update the Jinja environment with any custom settings/filters/options for this handler.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>base_dir</code>           \u2013            <p>The base directory of the project.</p> </li> <li> <code>config</code>           \u2013            <p>The handler configuration.</p> </li> <li> <code>custom_templates</code>           \u2013            <p>The path to custom templates.</p> </li> <li> <code>domain</code>               (<code>str</code>)           \u2013            <p>The cross-documentation domain/language for this handler.</p> </li> <li> <code>enable_inventory</code>               (<code>bool</code>)           \u2013            <p>Whether this handler is interested in enabling the creation of the <code>objects.inv</code> Sphinx inventory file.</p> </li> <li> <code>env</code>           \u2013            <p>The Jinja environment.</p> </li> <li> <code>extra_css</code>               (<code>str</code>)           \u2013            <p>Extra CSS.</p> </li> <li> <code>fallback_config</code>               (<code>dict</code>)           \u2013            <p>Fallback configuration when searching anchors for identifiers.</p> </li> <li> <code>fallback_theme</code>               (<code>str</code>)           \u2013            <p>The theme to fallback to.</p> </li> <li> <code>global_options</code>           \u2013            <p>The global configuration options.</p> </li> <li> <code>md</code>               (<code>Markdown</code>)           \u2013            <p>The Markdown instance.</p> </li> <li> <code>mdx</code>           \u2013            <p>The Markdown extensions to use.</p> </li> <li> <code>mdx_config</code>           \u2013            <p>The configuration for the Markdown extensions.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The handler's name.</p> </li> <li> <code>outer_layer</code>               (<code>bool</code>)           \u2013            <p>Whether we're in the outer Markdown conversion layer.</p> </li> <li> <code>theme</code>           \u2013            <p>The selected theme.</p> </li> </ul> Source code in <code>src/mkdocstrings_handlers/zig/_internal/handler.py</code> <pre><code>def __init__(self, config: ZigConfig, base_dir: Path, **kwargs: Any) -&gt; None:\n    \"\"\"Initialize the handler.\n\n    Parameters:\n        config: The handler configuration.\n        base_dir: The base directory of the project.\n        **kwargs: Arguments passed to the parent constructor.\n    \"\"\"\n    super().__init__(**kwargs)\n\n    self.config = config\n    \"\"\"The handler configuration.\"\"\"\n    self.base_dir = base_dir\n    \"\"\"The base directory of the project.\"\"\"\n    self.global_options = config.options\n    \"\"\"The global configuration options.\"\"\"\n\n    self._collected: dict[str, CollectorItem] = {}\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.base_dir","title":"base_dir  <code>instance-attribute</code>","text":"<pre><code>base_dir = base_dir\n</code></pre> <p>The base directory of the project.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.config","title":"config  <code>instance-attribute</code>","text":"<pre><code>config = config\n</code></pre> <p>The handler configuration.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.custom_templates","title":"custom_templates  <code>instance-attribute</code>","text":"<pre><code>custom_templates = custom_templates\n</code></pre> <p>The path to custom templates.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.domain","title":"domain  <code>class-attribute</code>","text":"<pre><code>domain: str = 'zig'\n</code></pre> <p>The cross-documentation domain/language for this handler.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.enable_inventory","title":"enable_inventory  <code>class-attribute</code>","text":"<pre><code>enable_inventory: bool = False\n</code></pre> <p>Whether this handler is interested in enabling the creation of the <code>objects.inv</code> Sphinx inventory file.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.env","title":"env  <code>instance-attribute</code>","text":"<pre><code>env = Environment(\n    autoescape=True,\n    loader=FileSystemLoader(paths),\n    auto_reload=False,\n)\n</code></pre> <p>The Jinja environment.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.extra_css","title":"extra_css  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra_css: str = ''\n</code></pre> <p>Extra CSS.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.fallback_config","title":"fallback_config  <code>class-attribute</code>","text":"<pre><code>fallback_config: dict = {}\n</code></pre> <p>Fallback configuration when searching anchors for identifiers.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.fallback_theme","title":"fallback_theme  <code>class-attribute</code>","text":"<pre><code>fallback_theme: str = 'material'\n</code></pre> <p>The theme to fallback to.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.global_options","title":"global_options  <code>instance-attribute</code>","text":"<pre><code>global_options = options\n</code></pre> <p>The global configuration options.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.md","title":"md  <code>property</code>","text":"<pre><code>md: Markdown\n</code></pre> <p>The Markdown instance.</p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>When the Markdown instance is not set yet.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.mdx","title":"mdx  <code>instance-attribute</code>","text":"<pre><code>mdx = mdx\n</code></pre> <p>The Markdown extensions to use.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.mdx_config","title":"mdx_config  <code>instance-attribute</code>","text":"<pre><code>mdx_config = mdx_config\n</code></pre> <p>The configuration for the Markdown extensions.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.name","title":"name  <code>class-attribute</code>","text":"<pre><code>name: str = 'zig'\n</code></pre> <p>The handler's name.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.outer_layer","title":"outer_layer  <code>property</code>","text":"<pre><code>outer_layer: bool\n</code></pre> <p>Whether we're in the outer Markdown conversion layer.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.theme","title":"theme  <code>instance-attribute</code>","text":"<pre><code>theme = theme\n</code></pre> <p>The selected theme.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.collect","title":"collect","text":"<pre><code>collect(\n    identifier: str, options: ZigOptions\n) -&gt; CollectorItem\n</code></pre> <p>Collect data given an identifier and selection configuration.</p> Source code in <code>src/mkdocstrings_handlers/zig/_internal/handler.py</code> <pre><code>def collect(self, identifier: str, options: ZigOptions) -&gt; CollectorItem:  # noqa: ARG002\n    \"\"\"Collect data given an identifier and selection configuration.\"\"\"\n    path = Path(identifier)\n    if path.is_dir():\n        modules = []\n        for p in sorted(path.rglob(\"*.zig\")):\n            modules.append(self._parse_module(p))\n    else:\n        modules = [self._parse_module(path)]\n\n    return modules\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.do_convert_markdown","title":"do_convert_markdown","text":"<pre><code>do_convert_markdown(\n    text: str,\n    heading_level: int,\n    html_id: str = \"\",\n    *,\n    strip_paragraph: bool = False,\n    autoref_hook: AutorefsHookInterface | None = None,\n) -&gt; Markup\n</code></pre> <p>Render Markdown text; for use inside templates.</p> <p>Parameters:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The text to convert.</p> </li> <li> <code>heading_level</code>               (<code>int</code>)           \u2013            <p>The base heading level to start all Markdown headings from.</p> </li> <li> <code>html_id</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>The HTML id of the element that's considered the parent of this element.</p> </li> <li> <code>strip_paragraph</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to exclude the <code>&lt;p&gt;</code> tag from around the whole output.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Markup</code>           \u2013            <p>An HTML string.</p> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/mkdocstrings/_internal/handlers/base.py</code> <pre><code>def do_convert_markdown(\n    self,\n    text: str,\n    heading_level: int,\n    html_id: str = \"\",\n    *,\n    strip_paragraph: bool = False,\n    autoref_hook: AutorefsHookInterface | None = None,\n) -&gt; Markup:\n    \"\"\"Render Markdown text; for use inside templates.\n\n    Arguments:\n        text: The text to convert.\n        heading_level: The base heading level to start all Markdown headings from.\n        html_id: The HTML id of the element that's considered the parent of this element.\n        strip_paragraph: Whether to exclude the `&lt;p&gt;` tag from around the whole output.\n\n    Returns:\n        An HTML string.\n    \"\"\"\n    global _markdown_conversion_layer  # noqa: PLW0603\n    _markdown_conversion_layer += 1\n    treeprocessors = self.md.treeprocessors\n    treeprocessors[HeadingShiftingTreeprocessor.name].shift_by = heading_level  # type: ignore[attr-defined]\n    treeprocessors[IdPrependingTreeprocessor.name].id_prefix = html_id and html_id + \"--\"  # type: ignore[attr-defined]\n    treeprocessors[ParagraphStrippingTreeprocessor.name].strip = strip_paragraph  # type: ignore[attr-defined]\n    if BacklinksTreeProcessor.name in treeprocessors:\n        treeprocessors[BacklinksTreeProcessor.name].initial_id = html_id  # type: ignore[attr-defined]\n\n    if autoref_hook:\n        self.md.inlinePatterns[AutorefsInlineProcessor.name].hook = autoref_hook  # type: ignore[attr-defined]\n\n    try:\n        return Markup(self.md.convert(text))\n    finally:\n        treeprocessors[HeadingShiftingTreeprocessor.name].shift_by = 0  # type: ignore[attr-defined]\n        treeprocessors[IdPrependingTreeprocessor.name].id_prefix = \"\"  # type: ignore[attr-defined]\n        treeprocessors[ParagraphStrippingTreeprocessor.name].strip = False  # type: ignore[attr-defined]\n        if BacklinksTreeProcessor.name in treeprocessors:\n            treeprocessors[BacklinksTreeProcessor.name].initial_id = None  # type: ignore[attr-defined]\n        self.md.inlinePatterns[AutorefsInlineProcessor.name].hook = None  # type: ignore[attr-defined]\n        self.md.reset()\n        _markdown_conversion_layer -= 1\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.do_heading","title":"do_heading","text":"<pre><code>do_heading(\n    content: Markup,\n    heading_level: int,\n    *,\n    role: str | None = None,\n    hidden: bool = False,\n    toc_label: str | None = None,\n    **attributes: str,\n) -&gt; Markup\n</code></pre> <p>Render an HTML heading and register it for the table of contents. For use inside templates.</p> <p>Parameters:</p> <ul> <li> <code>content</code>               (<code>Markup</code>)           \u2013            <p>The HTML within the heading.</p> </li> <li> <code>heading_level</code>               (<code>int</code>)           \u2013            <p>The level of heading (e.g. 3 -&gt; <code>h3</code>).</p> </li> <li> <code>role</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>An optional role for the object bound to this heading.</p> </li> <li> <code>hidden</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, only register it for the table of contents, don't render anything.</p> </li> <li> <code>toc_label</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The title to use in the table of contents ('data-toc-label' attribute).</p> </li> <li> <code>**attributes</code>               (<code>str</code>, default:                   <code>{}</code> )           \u2013            <p>Any extra HTML attributes of the heading.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Markup</code>           \u2013            <p>An HTML string.</p> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/mkdocstrings/_internal/handlers/base.py</code> <pre><code>def do_heading(\n    self,\n    content: Markup,\n    heading_level: int,\n    *,\n    role: str | None = None,\n    hidden: bool = False,\n    toc_label: str | None = None,\n    **attributes: str,\n) -&gt; Markup:\n    \"\"\"Render an HTML heading and register it for the table of contents. For use inside templates.\n\n    Arguments:\n        content: The HTML within the heading.\n        heading_level: The level of heading (e.g. 3 -&gt; `h3`).\n        role: An optional role for the object bound to this heading.\n        hidden: If True, only register it for the table of contents, don't render anything.\n        toc_label: The title to use in the table of contents ('data-toc-label' attribute).\n        **attributes: Any extra HTML attributes of the heading.\n\n    Returns:\n        An HTML string.\n    \"\"\"\n    # Produce a heading element that will be used later, in `AutoDocProcessor.run`, to:\n    # - register it in the ToC: right now we're in the inner Markdown conversion layer,\n    #   so we have to bubble up the information to the outer Markdown conversion layer,\n    #   for the ToC extension to pick it up.\n    # - register it in autorefs: right now we don't know what page is being rendered,\n    #   so we bubble up the information again to where autorefs knows the page,\n    #   and can correctly register the heading anchor (id) to its full URL.\n    # - register it in the objects inventory: same as for autorefs,\n    #   we don't know the page here, or the handler (and its domain),\n    #   so we bubble up the information to where the mkdocstrings extension knows that.\n    el = Element(f\"h{heading_level}\", attributes)\n    if toc_label is None:\n        toc_label = content.unescape() if isinstance(content, Markup) else content\n    el.set(\"data-toc-label\", toc_label)\n    if role:\n        el.set(\"data-role\", role)\n    if content:\n        el.text = str(content).strip()\n    self._headings.append(el)\n\n    if hidden:\n        return Markup('&lt;a id=\"{0}\"&gt;&lt;/a&gt;').format(attributes[\"id\"])\n\n    # Now produce the actual HTML to be rendered. The goal is to wrap the HTML content into a heading.\n    # Start with a heading that has just attributes (no text), and add a placeholder into it.\n    el = Element(f\"h{heading_level}\", attributes)\n    el.append(Element(\"mkdocstrings-placeholder\"))\n    # Tell the inner 'toc' extension to make its additions if configured so.\n    toc = cast(\"TocTreeprocessor\", self.md.treeprocessors[\"toc\"])\n    if toc.use_anchors:\n        toc.add_anchor(el, attributes[\"id\"])\n    if toc.use_permalinks:\n        toc.add_permalink(el, attributes[\"id\"])\n\n    # The content we received is HTML, so it can't just be inserted into the tree. We had marked the middle\n    # of the heading with a placeholder that can never occur (text can't directly contain angle brackets).\n    # Now this HTML wrapper can be \"filled\" by replacing the placeholder.\n    html_with_placeholder = tostring(el, encoding=\"unicode\")\n    assert (  # noqa: S101\n        html_with_placeholder.count(\"&lt;mkdocstrings-placeholder /&gt;\") == 1\n    ), f\"Bug in mkdocstrings: failed to replace in {html_with_placeholder!r}\"\n    html = html_with_placeholder.replace(\"&lt;mkdocstrings-placeholder /&gt;\", content)\n    return Markup(html)\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.get_aliases","title":"get_aliases","text":"<pre><code>get_aliases(identifier: str) -&gt; tuple[str, ...]\n</code></pre> <p>Get aliases for a given identifier.</p> Source code in <code>src/mkdocstrings_handlers/zig/_internal/handler.py</code> <pre><code>def get_aliases(self, identifier: str) -&gt; tuple[str, ...]:\n    \"\"\"Get aliases for a given identifier.\"\"\"\n    try:\n        data = self._collected[identifier]\n    except KeyError:\n        return ()\n    # Update the following code to return the canonical identifier and any aliases.\n    return (data.path,)\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.get_extended_templates_dirs","title":"get_extended_templates_dirs","text":"<pre><code>get_extended_templates_dirs(handler: str) -&gt; list[Path]\n</code></pre> <p>Load template extensions for the given handler, return their templates directories.</p> <p>Parameters:</p> <ul> <li> <code>handler</code>               (<code>str</code>)           \u2013            <p>The name of the handler to get the extended templates directory of.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Path]</code>           \u2013            <p>The extensions templates directories.</p> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/mkdocstrings/_internal/handlers/base.py</code> <pre><code>def get_extended_templates_dirs(self, handler: str) -&gt; list[Path]:\n    \"\"\"Load template extensions for the given handler, return their templates directories.\n\n    Arguments:\n        handler: The name of the handler to get the extended templates directory of.\n\n    Returns:\n        The extensions templates directories.\n    \"\"\"\n    discovered_extensions = entry_points(group=f\"mkdocstrings.{handler}.templates\")\n    return [extension.load()() for extension in discovered_extensions]\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.get_headings","title":"get_headings","text":"<pre><code>get_headings() -&gt; Sequence[Element]\n</code></pre> <p>Return and clear the headings gathered so far.</p> <p>Returns:</p> <ul> <li> <code>Sequence[Element]</code>           \u2013            <p>A list of HTML elements.</p> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/mkdocstrings/_internal/handlers/base.py</code> <pre><code>def get_headings(self) -&gt; Sequence[Element]:\n    \"\"\"Return and clear the headings gathered so far.\n\n    Returns:\n        A list of HTML elements.\n    \"\"\"\n    result = list(self._headings)\n    self._headings.clear()\n    return result\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.get_inventory_urls","title":"get_inventory_urls","text":"<pre><code>get_inventory_urls() -&gt; list[tuple[str, dict[str, Any]]]\n</code></pre> <p>Return the URLs (and configuration options) of the inventory files to download.</p> Source code in <code>.venv/lib/python3.12/site-packages/mkdocstrings/_internal/handlers/base.py</code> <pre><code>def get_inventory_urls(self) -&gt; list[tuple[str, dict[str, Any]]]:\n    \"\"\"Return the URLs (and configuration options) of the inventory files to download.\"\"\"\n    return []\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.get_options","title":"get_options","text":"<pre><code>get_options(\n    local_options: Mapping[str, Any],\n) -&gt; HandlerOptions\n</code></pre> <p>Get combined default, global and local options.</p> <p>Parameters:</p> <ul> <li> <code>local_options</code>               (<code>Mapping[str, Any]</code>)           \u2013            <p>The local options.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>HandlerOptions</code>           \u2013            <p>The combined options.</p> </li> </ul> Source code in <code>src/mkdocstrings_handlers/zig/_internal/handler.py</code> <pre><code>def get_options(self, local_options: Mapping[str, Any]) -&gt; HandlerOptions:\n    \"\"\"Get combined default, global and local options.\n\n    Arguments:\n        local_options: The local options.\n\n    Returns:\n        The combined options.\n    \"\"\"\n    extra = {\n        **self.global_options.get(\"extra\", {}),\n        **local_options.get(\"extra\", {}),\n    }\n    options = {**self.global_options, **local_options, \"extra\": extra}\n    try:\n        return ZigOptions.from_data(**options)\n    except Exception as error:\n        raise PluginError(f\"Invalid options: {error}\") from error\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.get_templates_dir","title":"get_templates_dir","text":"<pre><code>get_templates_dir(handler: str | None = None) -&gt; Path\n</code></pre> <p>Return the path to the handler's templates directory.</p> <p>Override to customize how the templates directory is found.</p> <p>Parameters:</p> <ul> <li> <code>handler</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The name of the handler to get the templates directory of.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ModuleNotFoundError</code>             \u2013            <p>When no such handler is installed.</p> </li> <li> <code>FileNotFoundError</code>             \u2013            <p>When the templates directory cannot be found.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Path</code>           \u2013            <p>The templates directory path.</p> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/mkdocstrings/_internal/handlers/base.py</code> <pre><code>def get_templates_dir(self, handler: str | None = None) -&gt; Path:\n    \"\"\"Return the path to the handler's templates directory.\n\n    Override to customize how the templates directory is found.\n\n    Arguments:\n        handler: The name of the handler to get the templates directory of.\n\n    Raises:\n        ModuleNotFoundError: When no such handler is installed.\n        FileNotFoundError: When the templates directory cannot be found.\n\n    Returns:\n        The templates directory path.\n    \"\"\"\n    handler = handler or self.name\n    try:\n        import mkdocstrings_handlers\n    except ModuleNotFoundError as error:\n        raise ModuleNotFoundError(f\"Handler '{handler}' not found, is it installed?\") from error\n\n    for path in mkdocstrings_handlers.__path__:\n        theme_path = Path(path, handler, \"templates\")\n        if theme_path.exists():\n            return theme_path\n\n    raise FileNotFoundError(f\"Can't find 'templates' folder for handler '{handler}'\")\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.load_inventory","title":"load_inventory  <code>classmethod</code>","text":"<pre><code>load_inventory(\n    in_file: BinaryIO,\n    url: str,\n    base_url: str | None = None,\n    **kwargs: Any,\n) -&gt; Iterator[tuple[str, str]]\n</code></pre> <p>Yield items and their URLs from an inventory file streamed from <code>in_file</code>.</p> <p>Parameters:</p> <ul> <li> <code>in_file</code>               (<code>BinaryIO</code>)           \u2013            <p>The binary file-like object to read the inventory from.</p> </li> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>The URL that this file is being streamed from (used to guess <code>base_url</code>).</p> </li> <li> <code>base_url</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The URL that this inventory's sub-paths are relative to.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Ignore additional arguments passed from the config.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>tuple[str, str]</code>           \u2013            <p>Tuples of (item identifier, item URL).</p> </li> </ul> Source code in <code>.venv/lib/python3.12/site-packages/mkdocstrings/_internal/handlers/base.py</code> <pre><code>@classmethod\ndef load_inventory(\n    cls,\n    in_file: BinaryIO,  # noqa: ARG003\n    url: str,  # noqa: ARG003\n    base_url: str | None = None,  # noqa: ARG003\n    **kwargs: Any,  # noqa: ARG003\n) -&gt; Iterator[tuple[str, str]]:\n    \"\"\"Yield items and their URLs from an inventory file streamed from `in_file`.\n\n    Arguments:\n        in_file: The binary file-like object to read the inventory from.\n        url: The URL that this file is being streamed from (used to guess `base_url`).\n        base_url: The URL that this inventory's sub-paths are relative to.\n        **kwargs: Ignore additional arguments passed from the config.\n\n    Yields:\n        Tuples of (item identifier, item URL).\n    \"\"\"\n    yield from ()\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.render","title":"render","text":"<pre><code>render(data: CollectorItem, options: ZigOptions) -&gt; str\n</code></pre> <p>Render a template using provided data and configuration options.</p> Source code in <code>src/mkdocstrings_handlers/zig/_internal/handler.py</code> <pre><code>def render(self, data: CollectorItem, options: ZigOptions) -&gt; str:\n    \"\"\"Render a template using provided data and configuration options.\"\"\"\n    # The `data` argument is the data to render, that was collected above in `collect()`.\n    # The `options` argument is the configuration options for loading/rendering the data.\n    # It contains both the global and local options, combined together.\n\n    # You might want to get the template based on the data type.\n    template = self.env.get_template(\"root.html.jinja\")\n    # All the following variables will be available in the Jinja templates.\n    return template.render(\n        config=options,\n        data=data,  # You might want to rename `data` into something more specific.\n        heading_level=options.heading_level,\n        root=True,\n    )\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.render_backlinks","title":"render_backlinks","text":"<pre><code>render_backlinks(\n    backlinks: Mapping[str, Iterable[Backlink]],\n) -&gt; str\n</code></pre> <p>Render backlinks.</p> Source code in <code>.venv/lib/python3.12/site-packages/mkdocstrings/_internal/handlers/base.py</code> <pre><code>def render_backlinks(self, backlinks: Mapping[str, Iterable[Backlink]]) -&gt; str:  # noqa: ARG002\n    \"\"\"Render backlinks.\"\"\"\n    return \"\"\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.teardown","title":"teardown","text":"<pre><code>teardown() -&gt; None\n</code></pre> <p>Teardown the handler.</p> <p>This method should be implemented to, for example, terminate a subprocess that was started when creating the handler instance.</p> Source code in <code>.venv/lib/python3.12/site-packages/mkdocstrings/_internal/handlers/base.py</code> <pre><code>def teardown(self) -&gt; None:\n    \"\"\"Teardown the handler.\n\n    This method should be implemented to, for example, terminate a subprocess\n    that was started when creating the handler instance.\n    \"\"\"\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigHandler.update_env","title":"update_env","text":"<pre><code>update_env(config: dict) -&gt; None\n</code></pre> <p>Update the Jinja environment with any custom settings/filters/options for this handler.</p> <p>Parameters:</p> <ul> <li> <code>config</code>               (<code>dict</code>)           \u2013            <p>MkDocs configuration, read from <code>mkdocs.yml</code>.</p> </li> </ul> Source code in <code>src/mkdocstrings_handlers/zig/_internal/handler.py</code> <pre><code>def update_env(self, config: dict) -&gt; None:  # noqa: ARG002\n    \"\"\"Update the Jinja environment with any custom settings/filters/options for this handler.\n\n    Parameters:\n        config: MkDocs configuration, read from `mkdocs.yml`.\n    \"\"\"\n    self.env.trim_blocks = True\n    self.env.lstrip_blocks = True\n    self.env.keep_trailing_newline = False\n    self.env.filters[\"markdown\"] = markdown.markdown\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigInputConfig","title":"ZigInputConfig  <code>dataclass</code>","text":"<pre><code>ZigInputConfig(\n    options: Annotated[\n        ZigInputOptions,\n        _Field(\n            description=\"Configuration options for collecting and rendering objects.\"\n        ),\n    ] = ZigInputOptions(),\n)\n</code></pre> <p>Zig handler configuration.</p> <p>Methods:</p> <ul> <li> <code>coerce</code>             \u2013              <p>Coerce data.</p> </li> <li> <code>from_data</code>             \u2013              <p>Create an instance from a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>options</code>               (<code>Annotated[ZigInputOptions, _Field(description='Configuration options for collecting and rendering objects.')]</code>)           \u2013            <p>Configuration options for collecting and rendering objects.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigInputConfig.options","title":"options  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>options: Annotated[\n    ZigInputOptions,\n    _Field(\n        description=\"Configuration options for collecting and rendering objects.\"\n    ),\n] = field(default_factory=ZigInputOptions)\n</code></pre> <p>Configuration options for collecting and rendering objects.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigInputConfig.coerce","title":"coerce  <code>classmethod</code>","text":"<pre><code>coerce(**data: Any) -&gt; MutableMapping[str, Any]\n</code></pre> <p>Coerce data.</p> Source code in <code>src/mkdocstrings_handlers/zig/_internal/config.py</code> <pre><code>@classmethod\ndef coerce(cls, **data: Any) -&gt; MutableMapping[str, Any]:\n    \"\"\"Coerce data.\"\"\"\n    return data\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigInputConfig.from_data","title":"from_data  <code>classmethod</code>","text":"<pre><code>from_data(**data: Any) -&gt; Self\n</code></pre> <p>Create an instance from a dictionary.</p> Source code in <code>src/mkdocstrings_handlers/zig/_internal/config.py</code> <pre><code>@classmethod\ndef from_data(cls, **data: Any) -&gt; Self:\n    \"\"\"Create an instance from a dictionary.\"\"\"\n    return cls(**cls.coerce(**data))\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigInputOptions","title":"ZigInputOptions  <code>dataclass</code>","text":"<pre><code>ZigInputOptions(\n    extra: Annotated[\n        dict[str, Any],\n        _Field(\n            group=\"general\", description=\"Extra options.\"\n        ),\n    ] = dict(),\n    heading: Annotated[\n        str,\n        _Field(\n            group=\"headings\",\n            description=\"A custom string to override the autogenerated heading of the root object.\",\n        ),\n    ] = \"\",\n    heading_level: Annotated[\n        int,\n        _Field(\n            group=\"headings\",\n            description=\"The initial heading level to use.\",\n        ),\n    ] = 2,\n    show_symbol_type_heading: Annotated[\n        bool,\n        _Field(\n            group=\"headings\",\n            description=\"Show the symbol type in headings (e.g. mod, class, meth, func and attr).\",\n        ),\n    ] = False,\n    show_symbol_type_toc: Annotated[\n        bool,\n        _Field(\n            group=\"headings\",\n            description=\"Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).\",\n        ),\n    ] = False,\n    toc_label: Annotated[\n        str,\n        _Field(\n            group=\"headings\",\n            description=\"A custom string to override the autogenerated toc label of the root object.\",\n        ),\n    ] = \"\",\n)\n</code></pre> <p>Accepted input options.</p> <p>Methods:</p> <ul> <li> <code>coerce</code>             \u2013              <p>Coerce data.</p> </li> <li> <code>from_data</code>             \u2013              <p>Create an instance from a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>extra</code>               (<code>Annotated[dict[str, Any], _Field(group='general', description='Extra options.')]</code>)           \u2013            <p>Extra options.</p> </li> <li> <code>heading</code>               (<code>Annotated[str, _Field(group='headings', description='A custom string to override the autogenerated heading of the root object.')]</code>)           \u2013            <p>A custom string to override the autogenerated heading of the root object.</p> </li> <li> <code>heading_level</code>               (<code>Annotated[int, _Field(group='headings', description='The initial heading level to use.')]</code>)           \u2013            <p>The initial heading level to use.</p> </li> <li> <code>show_symbol_type_heading</code>               (<code>Annotated[bool, _Field(group='headings', description='Show the symbol type in headings (e.g. mod, class, meth, func and attr).')]</code>)           \u2013            <p>Show the symbol type in headings (e.g. mod, class, meth, func and attr).</p> </li> <li> <code>show_symbol_type_toc</code>               (<code>Annotated[bool, _Field(group='headings', description='Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).')]</code>)           \u2013            <p>Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).</p> </li> <li> <code>toc_label</code>               (<code>Annotated[str, _Field(group='headings', description='A custom string to override the autogenerated toc label of the root object.')]</code>)           \u2013            <p>A custom string to override the autogenerated toc label of the root object.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigInputOptions.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra: Annotated[\n    dict[str, Any],\n    _Field(group=\"general\", description=\"Extra options.\"),\n] = field(default_factory=dict)\n</code></pre> <p>Extra options.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigInputOptions.heading","title":"heading  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>heading: Annotated[\n    str,\n    _Field(\n        group=\"headings\",\n        description=\"A custom string to override the autogenerated heading of the root object.\",\n    ),\n] = \"\"\n</code></pre> <p>A custom string to override the autogenerated heading of the root object.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigInputOptions.heading_level","title":"heading_level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>heading_level: Annotated[\n    int,\n    _Field(\n        group=\"headings\",\n        description=\"The initial heading level to use.\",\n    ),\n] = 2\n</code></pre> <p>The initial heading level to use.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigInputOptions.show_symbol_type_heading","title":"show_symbol_type_heading  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_symbol_type_heading: Annotated[\n    bool,\n    _Field(\n        group=\"headings\",\n        description=\"Show the symbol type in headings (e.g. mod, class, meth, func and attr).\",\n    ),\n] = False\n</code></pre> <p>Show the symbol type in headings (e.g. mod, class, meth, func and attr).</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigInputOptions.show_symbol_type_toc","title":"show_symbol_type_toc  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_symbol_type_toc: Annotated[\n    bool,\n    _Field(\n        group=\"headings\",\n        description=\"Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).\",\n    ),\n] = False\n</code></pre> <p>Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigInputOptions.toc_label","title":"toc_label  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toc_label: Annotated[\n    str,\n    _Field(\n        group=\"headings\",\n        description=\"A custom string to override the autogenerated toc label of the root object.\",\n    ),\n] = \"\"\n</code></pre> <p>A custom string to override the autogenerated toc label of the root object.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigInputOptions.coerce","title":"coerce  <code>classmethod</code>","text":"<pre><code>coerce(**data: Any) -&gt; MutableMapping[str, Any]\n</code></pre> <p>Coerce data.</p> Source code in <code>src/mkdocstrings_handlers/zig/_internal/config.py</code> <pre><code>@classmethod\ndef coerce(cls, **data: Any) -&gt; MutableMapping[str, Any]:\n    \"\"\"Coerce data.\"\"\"\n    return data\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigInputOptions.from_data","title":"from_data  <code>classmethod</code>","text":"<pre><code>from_data(**data: Any) -&gt; Self\n</code></pre> <p>Create an instance from a dictionary.</p> Source code in <code>src/mkdocstrings_handlers/zig/_internal/config.py</code> <pre><code>@classmethod\ndef from_data(cls, **data: Any) -&gt; Self:\n    \"\"\"Create an instance from a dictionary.\"\"\"\n    return cls(**cls.coerce(**data))\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigOptions","title":"ZigOptions  <code>dataclass</code>","text":"<pre><code>ZigOptions(\n    extra: Annotated[\n        dict[str, Any],\n        _Field(\n            group=\"general\", description=\"Extra options.\"\n        ),\n    ] = dict(),\n    heading: Annotated[\n        str,\n        _Field(\n            group=\"headings\",\n            description=\"A custom string to override the autogenerated heading of the root object.\",\n        ),\n    ] = \"\",\n    heading_level: Annotated[\n        int,\n        _Field(\n            group=\"headings\",\n            description=\"The initial heading level to use.\",\n        ),\n    ] = 2,\n    show_symbol_type_heading: Annotated[\n        bool,\n        _Field(\n            group=\"headings\",\n            description=\"Show the symbol type in headings (e.g. mod, class, meth, func and attr).\",\n        ),\n    ] = False,\n    show_symbol_type_toc: Annotated[\n        bool,\n        _Field(\n            group=\"headings\",\n            description=\"Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).\",\n        ),\n    ] = False,\n    toc_label: Annotated[\n        str,\n        _Field(\n            group=\"headings\",\n            description=\"A custom string to override the autogenerated toc label of the root object.\",\n        ),\n    ] = \"\",\n)\n</code></pre> <p>               Bases: <code>ZigInputOptions</code></p> <p>Final options passed as template context.</p> <p>Methods:</p> <ul> <li> <code>coerce</code>             \u2013              <p>Create an instance from a dictionary.</p> </li> <li> <code>from_data</code>             \u2013              <p>Create an instance from a dictionary.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>extra</code>               (<code>Annotated[dict[str, Any], _Field(group='general', description='Extra options.')]</code>)           \u2013            <p>Extra options.</p> </li> <li> <code>heading</code>               (<code>Annotated[str, _Field(group='headings', description='A custom string to override the autogenerated heading of the root object.')]</code>)           \u2013            <p>A custom string to override the autogenerated heading of the root object.</p> </li> <li> <code>heading_level</code>               (<code>Annotated[int, _Field(group='headings', description='The initial heading level to use.')]</code>)           \u2013            <p>The initial heading level to use.</p> </li> <li> <code>show_symbol_type_heading</code>               (<code>Annotated[bool, _Field(group='headings', description='Show the symbol type in headings (e.g. mod, class, meth, func and attr).')]</code>)           \u2013            <p>Show the symbol type in headings (e.g. mod, class, meth, func and attr).</p> </li> <li> <code>show_symbol_type_toc</code>               (<code>Annotated[bool, _Field(group='headings', description='Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).')]</code>)           \u2013            <p>Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).</p> </li> <li> <code>toc_label</code>               (<code>Annotated[str, _Field(group='headings', description='A custom string to override the autogenerated toc label of the root object.')]</code>)           \u2013            <p>A custom string to override the autogenerated toc label of the root object.</p> </li> </ul>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigOptions.extra","title":"extra  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extra: Annotated[\n    dict[str, Any],\n    _Field(group=\"general\", description=\"Extra options.\"),\n] = field(default_factory=dict)\n</code></pre> <p>Extra options.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigOptions.heading","title":"heading  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>heading: Annotated[\n    str,\n    _Field(\n        group=\"headings\",\n        description=\"A custom string to override the autogenerated heading of the root object.\",\n    ),\n] = \"\"\n</code></pre> <p>A custom string to override the autogenerated heading of the root object.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigOptions.heading_level","title":"heading_level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>heading_level: Annotated[\n    int,\n    _Field(\n        group=\"headings\",\n        description=\"The initial heading level to use.\",\n    ),\n] = 2\n</code></pre> <p>The initial heading level to use.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigOptions.show_symbol_type_heading","title":"show_symbol_type_heading  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_symbol_type_heading: Annotated[\n    bool,\n    _Field(\n        group=\"headings\",\n        description=\"Show the symbol type in headings (e.g. mod, class, meth, func and attr).\",\n    ),\n] = False\n</code></pre> <p>Show the symbol type in headings (e.g. mod, class, meth, func and attr).</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigOptions.show_symbol_type_toc","title":"show_symbol_type_toc  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show_symbol_type_toc: Annotated[\n    bool,\n    _Field(\n        group=\"headings\",\n        description=\"Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).\",\n    ),\n] = False\n</code></pre> <p>Show the symbol type in the Table of Contents (e.g. mod, class, methd, func and attr).</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigOptions.toc_label","title":"toc_label  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>toc_label: Annotated[\n    str,\n    _Field(\n        group=\"headings\",\n        description=\"A custom string to override the autogenerated toc label of the root object.\",\n    ),\n] = \"\"\n</code></pre> <p>A custom string to override the autogenerated toc label of the root object.</p>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigOptions.coerce","title":"coerce  <code>classmethod</code>","text":"<pre><code>coerce(**data: Any) -&gt; MutableMapping[str, Any]\n</code></pre> <p>Create an instance from a dictionary.</p> Source code in <code>src/mkdocstrings_handlers/zig/_internal/config.py</code> <pre><code>@classmethod\ndef coerce(cls, **data: Any) -&gt; MutableMapping[str, Any]:\n    \"\"\"Create an instance from a dictionary.\"\"\"\n    # Coerce any field into its final form.\n    return super().coerce(**data)\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.ZigOptions.from_data","title":"from_data  <code>classmethod</code>","text":"<pre><code>from_data(**data: Any) -&gt; Self\n</code></pre> <p>Create an instance from a dictionary.</p> Source code in <code>src/mkdocstrings_handlers/zig/_internal/config.py</code> <pre><code>@classmethod\ndef from_data(cls, **data: Any) -&gt; Self:\n    \"\"\"Create an instance from a dictionary.\"\"\"\n    return cls(**cls.coerce(**data))\n</code></pre>"},{"location":"reference/api/#mkdocstrings_handlers.zig.get_handler","title":"get_handler","text":"<pre><code>get_handler(\n    handler_config: MutableMapping[str, Any],\n    tool_config: MkDocsConfig,\n    **kwargs: Any,\n) -&gt; ZigHandler\n</code></pre> <p>Simply return an instance of <code>ZigHandler</code>.</p> <p>Parameters:</p> <ul> <li> <code>handler_config</code>               (<code>MutableMapping[str, Any]</code>)           \u2013            <p>The handler configuration.</p> </li> <li> <code>tool_config</code>               (<code>MkDocsConfig</code>)           \u2013            <p>The tool (SSG) configuration.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ZigHandler</code>           \u2013            <p>An instance of <code>ZigHandler</code>.</p> </li> </ul> Source code in <code>src/mkdocstrings_handlers/zig/_internal/handler.py</code> <pre><code>def get_handler(\n    handler_config: MutableMapping[str, Any],\n    tool_config: MkDocsConfig,\n    **kwargs: Any,\n) -&gt; ZigHandler:\n    \"\"\"Simply return an instance of `ZigHandler`.\n\n    Arguments:\n        handler_config: The handler configuration.\n        tool_config: The tool (SSG) configuration.\n\n    Returns:\n        An instance of `ZigHandler`.\n    \"\"\"\n    base_dir = Path(tool_config.config_file_path or \"./mkdocs.yml\").parent\n    return ZigHandler(\n        config=ZigConfig.from_data(**handler_config),\n        base_dir=base_dir,\n        **kwargs,\n    )\n</code></pre>"},{"location":"usage/customization/","title":"Customization","text":"<p>It is possible to customize the output of the generated documentation with CSS and/or by overriding templates.</p>"},{"location":"usage/customization/#css-classes","title":"CSS classes","text":"<p>Our templates add CSS classes to many HTML elements to make it possible for users to customize the resulting look and feel.</p> <p>To add CSS rules and style mkdocstrings' output, put them in a CSS file in your docs folder, for example in <code>docs/css/mkdocstrings.css</code>, and reference this file in MkDocs' <code>extra_css</code> configuration option:</p> mkdocs.yml<pre><code>extra_css:\n- css/mkdocstrings.css\n</code></pre> <p>Example:</p> docs/css/mkdocstrings.css<pre><code>.doc-section-title {\n  font-weight: bold;\n}\n</code></pre>"},{"location":"usage/customization/#symbol-types","title":"Symbol types","text":""},{"location":"usage/customization/#colors","title":"Colors","text":"<p>You can customize the colors of the symbol types (see <code>show_symbol_type_heading</code> and <code>show_symbol_type_toc</code>) by overriding the values of our CSS variables, for example:</p> docs/css/mkdocstrings.css<pre><code>[data-md-color-scheme=\"default\"] {\n  --doc-symbol-data-fg-color: #d1b619;\n\n  --doc-symbol-data-bg-color: #d1b6191a;\n}\n\n[data-md-color-scheme=\"slate\"] {\n  --doc-symbol-data-fg-color: #46c2cb;\n\n  --doc-symbol-data-bg-color: #46c2cb1a;\n}\n</code></pre> <p>The <code>[data-md-color-scheme=\"*\"]</code> selectors work with the [Material for MkDocs] theme. If you are using another theme, adapt the selectors to this theme if it supports light and dark themes, otherwise just override the variables at root level:</p> docs/css/mkdocstrings.css<pre><code>:root {\n  --doc-symbol-data-fg-color: #d1b619;\n\n  --doc-symbol-data-bg-color: #d1b6191a;\n}\n</code></pre> <p>Preview</p> <p>     Try cycling through the themes to see the colors for each theme:     <code></code>"},{"location":"usage/customization/#names","title":"Names","text":"<p>You can also change the actual symbol names. For example, to use single letters instead of truncated types:</p> docs/css/mkdocstrings.css<pre><code>.doc-symbol-data::after {\n  content: \"D\";\n}\n</code></pre> <p>Preview</p> <ul> <li>Data: <code></code></li> </ul>"},{"location":"usage/customization/#templates","title":"Templates","text":"<p>Templates are organized into the following tree:</p> <pre><code>\ud83d\udcc1 theme/\n\u251c\u2500\u2500 \ud83d\udcc4 constant.html.jinja\n\u251c\u2500\u2500 \ud83d\udcc4 docstring.html.jinja\n\u251c\u2500\u2500 \ud83d\udcc4 fields.html.jinja\n\u251c\u2500\u2500 \ud83d\udcc4 function.html.jinja\n\u251c\u2500\u2500 \ud83d\udcc4 heading.html.jinja\n\u251c\u2500\u2500 \ud83d\udcc4 module.html.jinja\n\u251c\u2500\u2500 \ud83d\udcc4 parameters.html.jinja\n\u251c\u2500\u2500 \ud83d\udcc4 root.html.jinja\n\u2514\u2500\u2500 \ud83d\udcc4 struct.html.jinja\n</code></pre> <p>See them in the repository. See the general mkdocstrings documentation to learn how to override them: https://mkdocstrings.github.io/theming/#templates.</p> <p>Each one of these templates extends a base version in <code>theme/_base</code>. Example:</p> theme/data.html.jinja<pre><code>{% extends \"_base/data.html.jinja\" %}\n</code></pre> <p>Some of these templates define Jinja blocks. allowing to customize only parts of a template without having to fully copy-paste it into your project:</p> templates/theme/data.html<pre><code>{% extends \"_base/data.html\" %}\n{% block contents scoped %}\n  {{ block.super }}\n  Additional contents\n{% endblock contents %}\n</code></pre>"},{"location":"usage/configuration/","title":"Configuration","text":""},{"location":"usage/configuration/#globallocal-options","title":"Global/local options","text":"<p>The other options can be used both globally and locally, under the <code>options</code> key. For example, globally:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      python:\n        options:\n          do_something: true\n</code></pre> <p>...and locally, overriding the global configuration:</p> docs/some_page.md<pre><code>::: package.module.class\n    options:\n      do_something: false\n</code></pre> <p>These options affect how the documentation is collected from sources and rendered. See the following tables summarizing the options, and get more details for each option in the following pages:</p> <ul> <li>General options: various options that do not fit in the other categories</li> <li>Headings options: options related to headings and the table of contents     (or sidebar, depending on the theme used)</li> </ul>"},{"location":"usage/configuration/general/","title":"General options","text":""},{"location":"usage/configuration/general/#extra","title":"<code>extra</code>","text":"<ul> <li> Type <code>dict</code> <code>{}</code></li> </ul> <p>The <code>extra</code> option lets you inject additional variables into the Jinja context used when rendering templates. You can then use this extra context in your overridden templates.</p> <p>Local <code>extra</code> options will be merged into the global <code>extra</code> option:</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      zig:\n        options:\n          extra:\n            hello: world\n</code></pre> in docs/some_page.md (local configuration)<pre><code>::: your_package.your_module.your_func\n    options:\n      extra:\n        foo: bar\n</code></pre> <p>...will inject both <code>hello</code> and <code>foo</code> into the Jinja context when rendering <code>your_package.your_module.your_func</code>.</p>"},{"location":"usage/configuration/headings/","title":"Headings options","text":""},{"location":"usage/configuration/headings/#heading","title":"<code>heading</code>","text":"<ul> <li> Type <code>str</code> <code>\"\"</code></li> </ul> <p>A custom string to use as the heading of the root object (i.e. the object specified directly after the identifier <code>:::</code>). This will override the default heading generated by the plugin. See also the <code>toc_label</code> option.</p> <p>Not advised to be used as a global configuration option</p> <p> This option is not advised to be used as a global configuration option, as it will override the default heading for all objects. It is recommended to use it only in specific cases where you want to override the heading for a specific object.</p> in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      heading: \"My fancy module\"\n</code></pre> <p></p>"},{"location":"usage/configuration/headings/#heading_level","title":"<code>heading_level</code>","text":"<ul> <li> Type <code>int</code> <code>2</code></li> </ul> <p>The initial heading level to use.</p> <p>When injecting documentation for an object, the object itself and its members are rendered. For each layer of objects, we increase the heading level by 1.</p> <p>The initial heading level will be used for the first layer. If you set it to 3, then headings will start with <code>&lt;h3&gt;</code>.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      zig:\n        options:\n          heading_level: 2\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      heading_level: 3\n</code></pre> <p>Preview</p> With level 3 and root headingWith level 3, without root heading <code>module</code> (3) <p>Docstring of the module.</p> <code>ClassA</code> (4) <p>Docstring of class A.</p> <code>ClassB</code> (4) <p>Docstring of class B.</p> <code>method_1</code> (5) <p>Docstring of the method.</p> <p>Docstring of the module.</p> <code>ClassA</code> (3) <p>Docstring of class A.</p> <code>ClassB</code> (3) <p>Docstring of class B.</p> <code>method_1</code> (4) <p>Docstring of the method.</p> <p></p>"},{"location":"usage/configuration/headings/#show_symbol_type_heading","title":"<code>show_symbol_type_heading</code><code></code> <code>attribute</code><code></code> <code>function</code><code></code> <code>Class</code><code>attribute</code><code>function</code><code>Class</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the symbol type in headings.</p> <p>This option will prefix headings with <code></code>, <code></code>, <code></code>, <code></code> or <code></code> types. See also <code>show_symbol_type_toc</code>.</p> <p>To customize symbols, see Customizing symbol types.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      zig:\n        options:\n          show_symbol_type_heading: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      show_symbol_type_heading: false\n</code></pre> <p>Preview</p> With symbol type in headingsWithout symbol type in headings <code></code> <code>module</code> <p>Docstring of the module.</p> <p>Docstring of the module attribute.</p> <p>Docstring of the function.</p> <p>Docstring of the class.</p> <code></code> <code>method</code> <p>Docstring of the method.</p> <code>module</code> <p>Docstring of the module.</p> <p>Docstring of the module attribute.</p> <p>Docstring of the function.</p> <p>Docstring of the class.</p> <code>method</code> <p>Docstring of the method.</p> <p></p>"},{"location":"usage/configuration/headings/#show_symbol_type_toc","title":"<code>show_symbol_type_toc</code>","text":"<ul> <li> Type <code>bool</code> <code>False</code></li> </ul> <p>Show the symbol type in the Table of Contents.</p> <p>This option will prefix items in the ToC with <code></code>, <code></code>, <code></code>, <code></code> or <code></code> types. See also <code>show_symbol_type_heading</code>.</p> <p>To customize symbols, see Customizing symbol types.</p> in mkdocs.yml (global configuration)<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      zig:\n        options:\n          show_symbol_type_toc: true\n</code></pre> or in docs/some_page.md (local configuration)<pre><code>::: package.module\n    options:\n      show_symbol_type_toc: false\n</code></pre> <p>Preview</p> With symbol type in ToCWithout symbol type in ToC <ul> <li><code></code> module</li> <li><code></code> attribute</li> <li><code></code> function</li> <li><code></code> Class     <ul> <li><code></code> method</li> </ul> </li> </ul> <ul> <li>module</li> <li>attribute</li> <li>function</li> <li>Class     <ul> <li>method</li> </ul> </li> </ul> <p></p>"},{"location":"usage/configuration/headings/#toc_label","title":"<code>toc_label</code>","text":"<ul> <li> Type <code>str</code> <code>\"\"</code></li> </ul> <p>A custom string to use as the label in the Table of Contents for the root object (i.e. the one specified directly after the identifier <code>:::</code>). This will override the default label generated by the plugin. See also the <code>heading</code> option.</p> <p>Not advised to be used as a global configuration option</p> <p> This option is not advised to be used as a global configuration option, as it will override the default label for all objects. It is recommended to use it only in specific cases where you want to override the label for a specific object.</p> <p>Use with/without <code>heading</code></p> <p> If you use this option without specifying a custom <code>heading</code>, the default heading will be used in the page, but the label in the Table of Contents will be the one you specified. By providing both an option for <code>heading</code> and <code>toc_label</code>, we leave the customization entirely up to you.</p> in docs/some_page.md (local configuration)<pre><code>::: path.to.module\n    options:\n      heading: \"My fancy module\"\n      toc_label: \"My fancy module\"\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}